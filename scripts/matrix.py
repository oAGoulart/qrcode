import math

def print_indexes(order, check):
  for row in range(order):
    for col in range(order):
      i = row * order + col
      if i in check:
        print(f"{i:04d} ", end='')
      else:
        print("0000 ", end='')
    print("")

def dups(v):
  for e in v:
    if v.count(e) > 1:
      print(f"{e}")

def maskinfo(order):
  for i in range(15):
    if i < 8:
      index = 8*order+i
      if i > 5:
        index += 1
      #print(index)
    else:
      index = (15-i)*order+8
      if i > 8:
        index -= order
      #print(index)
    if i < 7:
      index=order*(order-i-1)+8
      print(index)
    else:
      index=order*8+order-8+i-7
      print(index)


def xorp(v, order, pattern):
  for i, e in enumerate(v):
    row = math.floor(e / order)
    col = e % order
    print(f"{row} {col} |", end='')
    if (pattern == 0):
      print(f"{(row + col) % 2 == 0},", end='')
    elif (pattern == 1):
      print(f"{row % 2 == 0},", end='')
    elif (pattern == 2):
      print(f"{col % 3 == 0},", end='')
    elif (pattern == 3):
      print(f"{(row + col) % 3 == 0},", end='')
    elif (pattern == 4):
      print(f"{(math.floor(row / 2) + math.floor(col / 3)) % 2 == 0},", end='')
    elif (pattern == 5):
      print(f"{((row * col) % 2) + ((row * col) % 3) == 0},", end='')
    elif (pattern == 6):
      print(f"{(((row * col) % 2) + ((row * col) % 3) ) % 2 == 0},", end='')
    elif (pattern == 7):
      print(f"{(((row + col) % 2) + ((row * col) % 3) ) % 2 == 0},", end='')
  print("")

v = [
840,839,811,810,782,781,753,752,724,723,695,694,666,665,637,636,608,607,579,578,550,549,521,520,492,491,463,462,434,433,405,404,376,375,347,346,318,317,289,288,
287,286,316,315,345,344,374,373,403,402,432,431,461,460,490,489,519,518,548,547,577,576,606,605,635,634,664,663,693,692,722,721,751,750,780,779,809,808,838,837,
836,835,807,806,778,777,749,748,575,574,546,545,517,516,488,487,459,458,430,429,401,400,372,371,343,342,314,313,285,284,
283,282,312,311,341,340,370,369,399,398,428,427,457,456,486,485,515,514,544,543,573,572,747,746,776,775,805,804,834,833,
832,831,803,802,774,773,745,744,715,686,657,628,599,571,570,542,541,513,512,484,483,455,454,426,425,397,396,368,367,339,338,310,309,281,280,252,251,223,222,165,164,136,135,107,106,78,77,49,48,20,19,
18,17,47,46,76,75,105,104,134,133,163,162,221,220,250,249,279,278,308,307,337,336,366,365,395,394,424,423,453,452,482,481,511,510,540,539,569,568,598,597,627,626,656,655,685,684,714,713,743,742,772,771,801,800,830,829,
828,827,799,798,770,769,741,740,712,711,683,682,654,653,625,624,596,595,567,566,538,537,509,508,480,479,451,450,422,421,393,392,364,363,335,334,306,305,277,276,248,247,219,218,161,160,132,131,103,102,74,73,45,44,16,15,
14,13,43,42,72,71,101,100,130,129,159,158,217,216,246,245,275,274,304,303,333,332,362,361,391,390,420,419,449,448,478,477,507,506,536,535,565,564,594,593,623,622,652,651,681,680,710,709,739,738,768,767,797,796,826,825,
824,823,795,794,766,765,737,736,708,707,679,678,650,649,621,620,592,591,563,562,534,533,505,504,476,475,447,446,418,417,389,388,360,359,331,330,302,301,273,272,244,243,215,214,157,156,128,127,99,98,70,69,41,40,12,11,
10,9,39,38,68,67,97,96,126,125,155,154,213,212,242,241,271,270,300,299,329,328,358,357,387,386,416,415,445,444,474,473,503,502,532,531,561,560,590,589,619,618,648,647,677,676,706,705,735,734,764,763,793,792,822,821,
588,587,559,558,530,529,501,500,472,471,443,442,414,413,385,384,356,355,327,326,298,297,269,268,
266,265,295,294,324,323,353,352,382,381,411,410,440,439,469,468,498,497,527,526,556,555,585,584,
583,582,554,553,525,524,496,495,467,466,438,437,409,408,380,379,351,350,322,321,293,292,264,263,
262,261,291,290,320,319,349,348,378,377,407,406,436,435,465,464,494,493,523,522,552,551,581,580
]

print_indexes(29, v)
#dups(v)
#xorp(v, 21, 0)
#maskinfo(21)
